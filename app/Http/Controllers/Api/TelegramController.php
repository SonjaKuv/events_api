<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Services\TelegramService;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;

class TelegramController extends Controller
{
    private TelegramService $telegramService;

    public function __construct(TelegramService $telegramService)
    {
        $this->telegramService = $telegramService;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤—è–∑–∫–µ Telegram
     */
    public function getStatus(): JsonResponse
    {
        $user = Auth::user();
        
        return response()->json([
            'is_connected' => !empty($user->telegram_id),
            'telegram_id' => $user->telegram_id,
            'bot_info' => $this->telegramService->getBotInfo(),
        ]);
    }

    /**
     * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    public function generateLinkCode(): JsonResponse
    {
        $user = Auth::user();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
        $linkCode = Str::random(8);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –∫—ç—à–µ –Ω–∞ 10 –º–∏–Ω—É—Ç
        cache()->put("telegram_link_{$linkCode}", $user->id, 600);
        
        return response()->json([
            'link_code' => $linkCode,
            'expires_in' => 600, // 10 –º–∏–Ω—É—Ç
            'instructions' => '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /link ' . $linkCode . ' –±–æ—Ç—É –≤ Telegram'
        ]);
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–æ –∫–æ–¥—É (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ webhook)
     */
    public function linkAccount(Request $request): JsonResponse
    {
        $validator = Validator::make($request->all(), [
            'code' => 'required|string|size:8',
            'telegram_id' => 'required|string',
            'username' => 'nullable|string',
            'first_name' => 'nullable|string',
            'last_name' => 'nullable|string',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        $userId = cache()->get("telegram_link_{$request->code}");
        if (!$userId) {
            return response()->json(['message' => '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥'], 400);
        }

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $user = \App\Models\User::find($userId);
        if (!$user) {
            return response()->json(['message' => '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'], 404);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        $existingUser = \App\Models\User::where('telegram_id', $request->telegram_id)->first();
        if ($existingUser && $existingUser->id !== $user->id) {
            return response()->json(['message' => '–≠—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'], 400);
        }

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        $user->update([
            'telegram_id' => $request->telegram_id,
        ]);

        // –£–¥–∞–ª—è–µ–º –∫–æ–¥ –∏–∑ –∫—ç—à–∞
        cache()->forget("telegram_link_{$request->code}");

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ Telegram
        $this->telegramService->sendMessage(
            $request->telegram_id,
            "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö."
        );

        return response()->json(['message' => '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω']);
    }

    /**
     * –û—Ç–≤—è–∑–∞—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç
     */
    public function unlinkAccount(): JsonResponse
    {
        $user = Auth::user();
        
        if (empty($user->telegram_id)) {
            return response()->json(['message' => 'Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω'], 400);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–≤—è–∑–∫–µ
        $this->telegramService->sendMessage(
            $user->telegram_id,
            "‚ùå <b>–ê–∫–∫–∞—É–Ω—Ç –æ—Ç–≤—è–∑–∞–Ω</b>\n\n–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö."
        );

        // –û—Ç–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        $user->update(['telegram_id' => null]);

        return response()->json(['message' => 'Telegram –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–≤—è–∑–∞–Ω']);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    public function sendTestMessage(): JsonResponse
    {
        $user = Auth::user();
        
        if (empty($user->telegram_id)) {
            return response()->json(['message' => 'Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω'], 400);
        }

        $success = $this->telegramService->sendMessage(
            $user->telegram_id,
            "üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
        );

        if ($success) {
            return response()->json(['message' => '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ']);
        } else {
            return response()->json(['message' => '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è'], 500);
        }
    }
} 
